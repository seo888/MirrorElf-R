services:
  mirror_elf_r:
    network_mode: host
    restart: always
    build: ./app
    container_name: mirror_elf_r
    depends_on:
      minio:
        condition: service_healthy # 确保 minio 健康后再启动
    volumes:
      - ./app:/app

  # minio:
  #   image: minio/minio
  #   container_name: minio
  #   ports:
  #     - "9000:9000" # API 端口
  #     - "9001:9001" # 控制台端口
  #   network_mode: host
  #   restart: always
  #   environment:
  #     MINIO_ACCESS_KEY: minio # 访问密钥
  #     MINIO_SECRET_KEY: minio123 # 秘密密钥
  #   volumes:
  #     - ./minio/data:/data # 数据存储目录
  #     - ./minio/config:/root/.minio # 配置文件目录
  #   command: server /data --console-address ":9001" -address ":9000" # 启动命令
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"] # 检查 MinIO 健康状态
  #     interval: 10s # 每 10 秒检查一次
  #     timeout: 5s # 超时时间
  #     retries: 10 # 重试次数
  minio:
    image: minio/minio
    container_name: minio
    hostname: minio
    ports:
      - "9000:9000"  # API端口
      - "9001:9001"  # 控制台端口
    environment:
      MINIO_ACCESS_KEY: minio    # 默认管理员账号
      MINIO_SECRET_KEY: minio123    # 默认管理员密码
    volumes:
      - ./minio/data:/data            # 数据持久化目录
      - ./minio/config:/root/.minio   # 配置目录（包含初始化脚本）
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    entrypoint: >
      sh -c "
        minio server /data --console-address ':9001' --address ':9000' &
        while ! curl -s http://localhost:9000/minio/health/live; do
          echo '正在等待MinIO启动...';
          sleep 1;
        done;
        wget -q -O mc https://dl.min.io/client/mc/release/linux-amd64/mc &&
        chmod +x mc &&
        ./mc alias set local http://localhost:9000 $$MINIO_ACCESS_KEY $$MINIO_SECRET_KEY &&
        ./mc version suspend local --recursive || true;
        wait
      "
    restart: unless-stopped
